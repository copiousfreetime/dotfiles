# vim: ft=gitconfig
[init]
  defaultBranch = main

[column]
  ui = auto

[branch]
  sort = -committerdate

[include]
  path = ~/.gitconfig-user

[tag]
  sort = version:refname


[color]
  # Colour terminal command output when possible.
  ui = auto
  diff = auto
  showbranch = auto
  status = auto

[push]
  # Push to the set upstream branch being tracked by default.
  default = simple
  autoSetupRemote = true
  followTags = true

[pull]
  rebase = true

[fetch]
  # Always prune when fetching (and pulling).
  prune = true
  pruneTags = true
  all = true

[rerere]
  # Store and re-use manual conflict resolution changes.
  enabled = true
  autoupdate = true

[core]
  # Exclude everything this file. Used for general exclusions.
  excludesfile = ~/.gitignore
  # Set attributes on files. Used for general diff improvements.
  attributesfile = ~/.gitattributes
  # Don't prompt for commit messages for merge commits.
  mergeoptions = --no-edit
  # pager = delta --dark

[help]
  # Autocorrect mistyped commands.
  autocorrect = "prompt"

[diff]
  algorithm = histogram
  colorMoved = plain
  mnemonicPrefix = true
  renames = true

[diff "xml"]
  textconv = xmllint --format --recover

[merge]
  conflictstyle = zdiff3

[hub]
  protocol = https

[apply]
  # Cleanup whitespace by default when apply patches.
  whitespace = fix

[commit]
  # Show the diff as a comment in the commit message template.
  verbose = true

[rebase]
  # Run `git stash` if needed before a `git rebase`
  autoStash = true
  updateRefs = true

[alias]
  # Show my branches
  mybranches = "!f() { if test $# = 0 ; then set -- refs/remotes ; fi ; git for-each-ref --format='%(authordate:relative)\t%(refname:short)\t%(authoremail)' --sort=authordate \"$@\" | sed -ne \"s/\t<$(git config user.email)>//p\" | column -s '\t' -t ; } ; f"

  ## 'New' Commands
  # Unstage the changes in a given file.
  unstage = reset HEAD --

  # View the current changes in the staging area.
  staged = diff --cached

  # Print the name of the current branch.
  current-branch = symbolic-ref --short HEAD

  # Print the name of the current upstream tracking branch.
  upstream = !git config --get branch.$(git current-branch).remote \
           || echo origin

  # Merge a branch and commit a merge commit (even if one
  # isn't needed)
  noff = merge --no-ff

  # Merge a branch with a merge commit and resolve any conflicts
  # always using that branch's version rather than the current branch.
  theirs = !git noff -Xtheirs

  # Fetch all branches and rebase the current branch against
  # upstream/master.
  rebase-against-master = !git fetch --all \
                        && git rebase $(git upstream)/master

  # Push the current branch upstream to origin using the same branch
  # name for the remote branch.
  upstream-current-branch = !git push --set-upstream origin \
                           $(git current-branch)

  # Upstream the current branch to origin and create a pull request
  # on GitHub.
  upstream-and-pull-request = !git upstream-current-branch \
                            && git pull-request

  # Get the current diff but show differences between characters
  # instead of just the differences between lines.
  word-diff = diff --word-diff

  # Push the current branch and set it as the default upstream branch.
  push-and-set-upstream = push --set-upstream

  # Create a new branch by checking out another branch.
  checkout-as-new-branch = checkout -b

  # Preview branch names and recent commit then checkout selection
  checkout-with-relative-age = !git branches-with-relative-age \
                               | fzf --reverse --nth=1 --preview 'git log --patch --color {1}...{1}~3' \
                               | awk '{print $1}' | xargs git checkout

  # Show the local branches along with their relative ages
  branches-with-relative-age = !git for-each-ref --sort=-committerdate --format='%(refname:short) : %(committerdate:relative)' refs/heads | column -t -s ':' \

  # Rebase against origin/master and prompt for what operations
  # should be performed.
  interactively-rebase-against-origin-master = \
    !git rebase --interactive origin/master

  # Show the commit log with a prettier, clearer history.
  pretty-one-line-log = log --graph --oneline --decorate

  # Commit any changes to files, squash them into the last commit
  # and update its date.
  fix-up-previous-commit = !git commit --all --amend \
                                --reuse-message=HEAD --date=\"$(date)\" #"

  # Commit a work-in-progress commit (to use with
  # fix-up-previous-commit)
  work-in-progress = commit -a -m 'WIP'

  # Hard reset branch to the upstream version.
  hard-reset = !git reset --hard $(git upstream)/$(git current-branch)

  # Prune branches and collect garbage
  prune-and-gc = !git remote prune origin && git prune && git gc

  # What have I been working on today
  today = !git log --since="00:00:00" --all --oneline --no-merges --author=\"$(git config user.email)\"

  ## Shortened 'New' Commands
  fahr = !git fetch --all && git hard-reset
  rem = !git rebase-against-master
  wip = !git work-in-progress
  fa = !git fetch --all
  pf = !git push --force-with-lease
  dh = !git diff HEAD
  br = !git branches-with-relative-age
  w = !git word-diff
  u = !git push-and-set-upstream
  b = !git checkout-as-new-branch
  i = !git interactively-rebase-against-origin-master
  # `true` needed as the return status is wrong otherwise.
  l = !git pretty-one-line-log || true
  f = !git fix-up-previous-commit
  pgc = !git prune-and-gc
  cor = !git checkout-with-relative-age

  ## Shortened Existing Commands
  p = pull
  s = status --short --branch
  con = diff --name-only --diff-filter=U
  co = checkout

